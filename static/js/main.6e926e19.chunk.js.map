{"version":3,"sources":["components/api/api.js","components/RoverSelect/RoverSelect.jsx","components/CamerasSelect/CamerasSelect.jsx","components/SolRange/SolRange.jsx","components/NasaPhoto/NasaPhoto.jsx","App.jsx","index.jsx"],"names":["BASE_URL","API_KEY","process","urls","baseUrl","token","request","a","fetch","response","json","result","rovers","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","colorStyle","color","fontWeight","textShadow","borderStyle","border","bgcStyle","backgroundColor","RoverSelect","selectedRover","filterByRoverName","classes","className","FormControl","variant","InputLabel","htmlFor","Select","native","value","hasOwnProperty","name","onChange","label","inputProps","id","disabled","aria-label","map","rover","CamerasSelect","cameras","filterByCamerasName","selectedCamera","camera","SolRange","solRange","selectSolDays","min","max","max_sol","type","defaultValue","NasaPhoto","setSelectedRover","setSelectedCamera","setSolRange","useState","photoData","setPhotoData","photoNumber","setPhotoNumber","toLowerCase","totalUrl","fetchPhoto","data","photos","reset","useEffect","buttonsLimit","maxButtonsLimit","setMaxButtonsLimit","minButtonsLimit","setMinButtonsLimit","buttons","photo","index","push","currentButtons","slice","length","console","log","Button","onClick","prevValue","number","classNames","photo__btn_active","event","target","Number","setImg","stopPropagation","src","img_src","alt","earth_date","App","setRovers","setCameras","loadRoversFromPage","roversFromServer","currentRover","find","currentCamera","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e926e19.chunk.js","sourcesContent":["// import ky from 'ky';\n// import qs from 'qs';\n\n// const client = ky.create({\n//   prefixUrl: 'https://api.nasa.gov/mars-photos/api/v1/rovers'\n// })\n\n// const createUrl = ({ rover, ...params}) =>\n//   `${rover}/photos?${qs.stringify({\n//     api_key: process.env.REACT_APP_MARS_API_KEY,\n//     ...params\n//   })}`;\n\n// const api = {\n//   photos: {\n//     read: ({ rover, camera, sol, page }) =>\n//     client\n//       .get(\n//         createUrl({\n//           rover,\n//           camera,\n//           sol,\n//           page\n//         })\n//       )\n//       .json()\n//   }\n// };\n\n// export default api;\n\nconst BASE_URL = 'https://api.nasa.gov/mars-photos/api/v1/rovers?';\n\nconst apiKey = process.env.REACT_APP_NASA_KEY;\n\nconst API_KEY = `api_key=${apiKey}`;\n\nexport const urls = {\n  baseUrl: 'https://api.nasa.gov/mars-photos/api/v1/rovers',\n  token: API_KEY,\n}\n\n// console.log(apiKey);\n// console.log(API_KEY);\n\n// https://api.nasa.gov/mars-photos/api/v1/rovers/\n// curiosity/photos?sol=1000&camera=fhaz&api_key=DEMO_KEY\n\nconst request = async() => {\n  const response = await fetch(`${BASE_URL}${API_KEY}`);\n  const result = await response.json();\n\n  return result.rovers;\n};\n\nexport const getRovers = () => request();\n\n\nconst createPhotoUrl = ({ rover, sol, camera }) => `${BASE_URL}\n  /${rover}/photos?sol=${sol}${API_KEY}`;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './roverSelect.scss';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nexport const useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  colorStyle: {\n    color: '#fff',\n    fontWeight: 600,\n    textShadow: '0 0 15px',\n  },\n  borderStyle: {\n    border: '2px solid #bbdefb'\n  },\n  bgcStyle: {\n    backgroundColor: '#388e3c'\n  }\n}));\n\n\nexport const RoverSelect = ({ selectedRover, filterByRoverName, rovers }) => {\n  const classes = useStyles()\n\n  return (\n    <div className=\"rovers\">\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n          <InputLabel\n            htmlFor=\"outlined-age-native-simple\"\n            className={classes.colorStyle}\n          >\n            Rover\n          </InputLabel>\n          <Select\n            className={classes.bgcStyle}\n            native\n            value={selectedRover.hasOwnProperty('name')\n            ? selectedRover.name\n            : \"Choose rover\"\n            }\n            onChange={filterByRoverName}\n            label=\"Rover\"\n            inputProps={{\n              name: 'rover',\n              id: 'outlined-age-native-simple',\n            }}\n          >\n            <option\n              disabled\n              aria-label=\"None\" value=\"Choose rover\"\n              className=\"rovers__option\"\n            >\n              Choose rover\n            </option>\n            {rovers.map(rover => (\n              <option\n                key={rover.id}\n                value={rover.name}\n              >\n                {rover.name}\n              </option>\n            ))}\n          </Select>\n        </FormControl>\n    </div>\n);\n}\n\nRoverSelect.propTypes = {\n  selectedRover: PropTypes.shape({}).isRequired,\n\n  filterByRoverName: PropTypes.func.isRequired,\n\n  rovers: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './camerasSelect.scss';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { useStyles } from '../RoverSelect';\n\nexport const CamerasSelect = ({\n  cameras,\n  filterByCamerasName,\n  selectedCamera,\n}) => {\n  const classes = useStyles()\n\n  return (\n  <div className=\"cameras\">\n    <FormControl variant=\"outlined\" className={classes.formControl }>\n      <InputLabel\n        htmlFor=\"outlined-age-native-simple\"\n        className={classes.colorStyle}\n      >\n        Camera\n      </InputLabel>\n      <Select\n        className={classes.bgcStyle}\n        native\n        value={selectedCamera.hasOwnProperty('name')\n            ? selectedCamera.name\n            : \"Choose camera\"\n            }\n        onChange={filterByCamerasName}\n        label=\"Camera\"\n        inputProps={{\n          name: 'rover',\n          id: 'outlined-age-native-simple',\n        }}\n      >\n        <option\n          disabled\n          aria-label=\"None\" value=\"Choose camera\"\n          className=\"cameras__option\"\n        >\n          Choose camera\n        </option>\n        {cameras.map(camera => (\n          <option\n          className=\"cameras__option\"\n            key={camera.id}\n            value={camera.name}\n          >\n            {camera.name}\n          </option>\n        ))}\n      </Select>\n    </FormControl>\n  </div>\n  );\n}\nCamerasSelect.propTypes = {\n  cameras: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n\n  selectedCamera: PropTypes.shape({}).isRequired,\n\n  filterByCamerasName: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './solRange.scss';\n\nexport const SolRange = ({\n  solRange,\n  selectSolDays,\n  selectedRover\n}) => {\n\n  return (\n    <div className=\"sol-range\">\n      <label\n        htmlFor=\"rangeId\"\n        className=\"sol-range__label\"\n      >\n        Choose sol:\n      </label>\n      <input\n        min=\"1\"\n        max={\n          selectedRover.hasOwnProperty('max_sol')\n          ? selectedRover.max_sol\n          : '1'\n        }\n        type=\"range\"\n        className=\"sol-range__field\"\n        id=\"rangeId\"\n        defaultValue={solRange}\n        onChange={selectSolDays}\n      />\n      <p className=\"sol-range__text\">\n        {solRange}\n      </p>\n    </div>\n  );\n};\n\nSolRange.propTypes = {\n  solRange: PropTypes.string.isRequired,\n  selectSolDays: PropTypes.func.isRequired,\n  selectedRover: PropTypes.shape({\n  }).isRequired,\n};\n","import React, { useState, useEffect, useReducer } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { urls } from '../api/api';\n\nimport Button from '@material-ui/core/Button';\n\n// import IconButton from '@material-ui/core/IconButton';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport ArrowLeftIcon from '@material-ui/icons/ArrowLeft';\n\nimport './nasaPhoto.scss';\nimport { number } from 'prop-types';\n\n// import { makeStyles } from '@material-ui/core/styles';\n// import { Pagination } from '@material-ui/lab';\n\n// const useStyles = makeStyles((theme) => ({\n//   root: {\n//     '& > *': {\n//       marginTop: theme.spacing(2),\n//     },\n//   },\n// }));\n\nexport const NasaPhoto = ({\n  selectedRover,\n  selectedCamera,\n  solRange,\n  setSelectedRover,\n  setSelectedCamera,\n  setSolRange,\n}) => {\n  // const classes = useStyles();\n\n  const [photoData, setPhotoData] = useState([]);\n  const [photoNumber, setPhotoNumber] = useState(1);\n  // const [offSet, setOffset] = useState(0);\n  // const [loading, setLoading] = useState(false);\n  // const [imgCount, setImgCount] = useState(0);\n  // const [buttons, setButtons] = useState([]);\n\n  const { baseUrl, token } = urls;\n  let rover = '';\n  let camera = '';\n\n  if(selectedRover && selectedCamera) {\n    if (selectedRover.hasOwnProperty('name') && selectedCamera.hasOwnProperty('name')) {\n      rover = selectedRover.name.toLowerCase();\n      camera = selectedCamera.name.toLowerCase()\n    }\n  }\n\n  const totalUrl = `${baseUrl}/${rover}/photos?sol=${solRange}&${camera}&${token}`;\n\n  const fetchPhoto = async() => {\n    if (rover && camera) {\n      const response = await fetch(totalUrl);\n      const data = await response.json();\n      setPhotoData([...data.photos]);\n    }\n\n    setSelectedRover({});\n    setSelectedCamera({});\n    setSolRange('1');\n    reset();\n  };\n\n  useEffect(() => {\n    fetchPhoto();\n\n    return\n  }, []);\n\n  const [buttonsLimit, setButtonsLimit] = useState(5);\n  const [maxButtonsLimit, setMaxButtonsLimit] = useState(5);\n  const [minButtonsLimit, setMinButtonsLimit] = useState(0);\n\n  const decrease = () => {\n    setPhotoNumber(prevValue => prevValue - 1);\n\n    if ((photoNumber) % buttonsLimit === 0) {\n      setMaxButtonsLimit(maxButtonsLimit - buttonsLimit);\n      setMinButtonsLimit(minButtonsLimit - buttonsLimit);\n    }\n  }\n\n  const increase = () => {\n    setPhotoNumber(prevValue => prevValue + 1);\n\n    if (photoNumber + 2 > maxButtonsLimit) {\n      setMaxButtonsLimit(maxButtonsLimit + buttonsLimit);\n      setMinButtonsLimit(minButtonsLimit + buttonsLimit);\n    }\n\n    // if (photoNumber + 1 === buttons[buttons.length -1]) {\n    //   setMaxButtonsLimit(minButtonsLimit + lastButtons);\n    //   setMinButtonsLimit(minButtonsLimit + buttonsLimit);\n    // }\n  }\n\n  const reset = () => {\n    setPhotoNumber(0)\n  }\n\n  const setImg = ({ target }) => {\n    console.log(target.name);\n    setPhotoNumber(prevValue => prevValue = Number(target.name) - 1);\n  };\n\n  const [buttonsPerPage, setButtonsPerPage] = useState(5)\n\n  const [buttons, setButtons] = useState([])\n  photoData.map((photo, index) => buttons.push(index + 1));\n  const currentButtons = buttons.slice(minButtonsLimit, maxButtonsLimit);\n  // const [currentButtonnss, setCurrentButtonnss] = useState(currentButtons);\n  const lastButtons = (buttons[buttons.length - 1]) % buttonsLimit;\n\n\n  // for (let i = 1; i <= Math.ceil(photoData.length / buttonsPerPage); i++) {\n  //   buttons.push(i);\n  // }\n\n  // const indexOfLastItem = photoNumber * buttonsPerPage;\n  // const indexOfFirstItem = indexOfLastItem - buttonsPerPage;\n\n  // if ((photoNumber + 2) === buttons[buttons.length - 1]) {\n  //   setMaxButtonsLimit(maxButtonsLimit + lastButtons);\n  // }\n\n  console.log(photoNumber);\n  console.log(minButtonsLimit);\n  // console.log(maxButtonsLimit);\n  // console.log(minButtonsLimit + lastButtons);\n  // // console.log(buttons[buttons.length - 1]);\n  // console.log(lastButtons);\n  // console.log(maxButtonsLimit);\n  // console.log(currentButtons[currentButtons.length - 1]);\n\n  // console.log(minButtonsLimit);\n  // console.log(maxButtonsLimit);\n\n  //CHECKPOINT!!!\n\n  return (\n    <div className=\"photo\">\n      <div className=\"photo__download-block\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={fetchPhoto}\n        >\n          Download Photo\n          <PhotoCamera/>\n        </Button>\n      </div>\n        <div className=\"photo__buttons\">\n          <button\n            type=\"button\"\n            onClick={decrease}\n            disabled={photoNumber === 0}\n            className=\"photo__btn photo__btn-left\"\n          >\n            <ArrowLeftIcon className=\"photo__btn-icon\" />\n          </button>\n          <button\n            type=\"button\"\n            onClick={increase}\n            disabled={photoNumber === photoData.length - 1}\n            className=\"photo__btn photo__btn-right\"\n          >\n            <ArrowRightIcon className=\"photo__btn-icon\" />\n          </button>\n        </div>\n      {!photoData.length && (\n        <h2 className=\"photo__title-loading\">\n          No photos, try another camera\n        </h2>\n      )}\n      {photoData.length > 1 && (\n        <div className=\"photo__container\">\n          <div className=\"photo__buttons-row\">\n            {currentButtons.map(number => (\n            <button\n              className={classNames('photo__btn-num', {\n                photo__btn_active: photoNumber === number - 1,\n              })}\n              key={number}\n              variant=\"contained\"\n              color=\"primary\"\n              name={number}\n              onClick={(event) => {\n                setImg(event);\n                event.stopPropagation();\n              }}\n            >\n              {number}\n            </button>\n            ))}\n          </div>\n          <h2 className=\"photo__title-count\">\n            {`${photoNumber + 1} / ${photoData.length}`}\n          </h2>\n          <img\n            className=\"photo__img\"\n            src={(photoData[photoNumber]) && photoData[photoNumber].img_src}\n            alt=\"rover photo\"\n          />\n          {photoData[photoNumber] && (\n            <p className=\"photo__date\">\n            {photoData[photoNumber].earth_date}\n          </p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nNasaPhoto.propTypes = {\n  selectedRover: PropTypes.shape({}).isRequired,\n  selectedCamera: PropTypes.shape({}).isRequired,\n  solRange: PropTypes.string.isRequired,\n\n  setSelectedRover: PropTypes.func.isRequired,\n  setSelectedCamera: PropTypes.func.isRequired,\n  setSolRange: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { getRovers } from './components/api/api';\nimport { RoverSelect } from './components/RoverSelect';\nimport { CamerasSelect } from './components/CamerasSelect';\nimport { SolRange } from './components/SolRange';\nimport { NasaPhoto } from './components/NasaPhoto/';\n\nimport './app.scss';\n\nexport const App = () => {\n  const [rovers, setRovers] = useState([]);\n  const [selectedRover, setSelectedRover] = useState({});\n  const [cameras, setCameras] = useState([]);\n  const [selectedCamera, setSelectedCamera] = useState({});\n  const [solRange, setSolRange] = useState('1');\n\n  const loadRoversFromPage = async() => {\n    const roversFromServer = await getRovers();\n\n    setRovers([...roversFromServer]);\n  };\n\n  useEffect(() => {\n    loadRoversFromPage();\n  }, []);\n\n  const filterByRoverName = ({ target }) => {\n    const currentRover = rovers.find(rover => rover.name === target.value);\n\n    setSelectedRover(currentRover);\n\n    if (currentRover) {\n      setCameras(currentRover.cameras);\n    }\n  };\n\n  const filterByCamerasName = ({ target }) => {\n    const currentCamera = cameras.find(camera => camera.name === target.value);\n\n    setSelectedCamera(currentCamera);\n  };\n\n  const selectSolDays = ({ target }) => {\n    setSolRange(target.value);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">\n        NASA APIs\n      </h1>\n      <div className=\"app__logo\"/>\n      <div className=\"app__selects\">\n        <RoverSelect\n          filterByRoverName={filterByRoverName}\n          selectedRover={selectedRover}\n          rovers={rovers}\n        />\n        <CamerasSelect\n          filterByCamerasName={filterByCamerasName}\n          selectedCamera={selectedCamera}\n          cameras={cameras}\n        />\n        <SolRange\n          selectSolDays={selectSolDays}\n          solRange={solRange}\n          selectedRover={selectedRover}\n        />\n      </div>\n      <NasaPhoto\n        selectedRover={selectedRover}\n        selectedCamera={selectedCamera}\n        solRange={solRange}\n        setSelectedRover={setSelectedRover}\n        setSelectedCamera={setSelectedCamera}\n        setSolRange={setSolRange}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}