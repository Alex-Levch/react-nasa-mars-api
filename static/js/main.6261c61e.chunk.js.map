{"version":3,"sources":["components/api/api.js","components/RoverSelect/RoverSelect.jsx","components/CamerasSelect/CamerasSelect.jsx","components/SolRange/SolRange.jsx","components/NasaPhoto/NasaPhoto.jsx","App.jsx","index.jsx"],"names":["API_KEY","process","urls","baseUrl","token","request","a","fetch","response","json","result","rovers","useStyles","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","colorStyle","color","fontWeight","textShadow","borderStyle","border","bgcStyle","backgroundColor","RoverSelect","selectedRover","filterByRoverName","classes","className","FormControl","variant","InputLabel","htmlFor","Select","native","value","hasOwnProperty","name","onChange","label","inputProps","id","disabled","aria-label","map","rover","CamerasSelect","cameras","filterByCamerasName","selectedCamera","camera","SolRange","solRange","selectSolDays","min","max","max_sol","type","defaultValue","NasaPhoto","setSelectedRover","setSelectedCamera","setSolRange","useState","photoData","setPhotoData","photoNumber","setPhotoNumber","toLowerCase","totalUrl","console","log","buttons","setButtons","fetchPhoto","data","photos","reset","useEffect","buttonsLimit","maxButtonsLimit","setMaxButtonsLimit","minButtonsLimit","setMinButtonsLimit","photo","index","push","currentButtons","slice","Button","onClick","prevValue","length","number","classNames","photo__btn_active","event","target","Number","setImg","stopPropagation","src","img_src","alt","earth_date","App","setRovers","setCameras","loadRoversFromPage","roversFromServer","currentRover","find","currentCamera","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6261c61e.chunk.js","sourcesContent":["\nconst BASE_URL = 'https://api.nasa.gov/mars-photos/api/v1/rovers?';\n\nconst apiKey = process.env.REACT_APP_NASA_KEY;\n\nconst API_KEY = `api_key=${apiKey}`;\n\nexport const urls = {\n  baseUrl: 'https://api.nasa.gov/mars-photos/api/v1/rovers',\n  token: API_KEY,\n};\n\nconst request = async() => {\n  const response = await fetch(`${BASE_URL}${API_KEY}`);\n  const result = await response.json();\n\n  return result.rovers;\n};\n\nexport const getRovers = () => request();\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './roverSelect.scss';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\n\nexport const useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  colorStyle: {\n    color: '#fff',\n    fontWeight: 600,\n    textShadow: '0 0 15px',\n  },\n  borderStyle: {\n    border: '2px solid #bbdefb',\n  },\n  bgcStyle: {\n    backgroundColor: '#388e3c',\n  },\n}));\n\nexport const RoverSelect = ({ selectedRover, filterByRoverName, rovers }) => {\n  const classes = useStyles();\n\n  return (\n    <div className=\"rovers\">\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel\n          htmlFor=\"outlined-age-native-simple\"\n          className={classes.colorStyle}\n        >\n          Rover\n        </InputLabel>\n        <Select\n          className={classes.bgcStyle}\n          native\n          // eslint-disable-next-line no-prototype-builtins\n          value={selectedRover.hasOwnProperty('name')\n            // eslint-disable-next-line react/prop-types\n            ? selectedRover.name\n            : 'Choose rover'\n          }\n          onChange={filterByRoverName}\n          label=\"Rover\"\n          inputProps={{\n            name: 'rover',\n            id: 'outlined-age-native-simple',\n          }}\n        >\n          <option\n            disabled\n            aria-label=\"None\"\n            value=\"Choose rover\"\n            className=\"rovers__option\"\n          >\n            Choose rover\n          </option>\n          {rovers.map(rover => (\n            <option\n              key={rover.id}\n              value={rover.name}\n            >\n              {rover.name}\n            </option>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n\nRoverSelect.propTypes = {\n  selectedRover: PropTypes.shape({}).isRequired,\n\n  filterByRoverName: PropTypes.func.isRequired,\n\n  rovers: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './camerasSelect.scss';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { useStyles } from '../RoverSelect';\n\nexport const CamerasSelect = ({\n  cameras,\n  filterByCamerasName,\n  selectedCamera,\n}) => {\n  const classes = useStyles();\n\n  return (\n    <div className=\"cameras\">\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel\n          htmlFor=\"outlined-age-native-simple\"\n          className={classes.colorStyle}\n        >\n          Camera\n        </InputLabel>\n        <Select\n          className={classes.bgcStyle}\n          native\n          // eslint-disable-next-line no-prototype-builtins\n          value={selectedCamera.hasOwnProperty('name')\n            // eslint-disable-next-line react/prop-types\n            ? selectedCamera.name\n            : 'Choose camera'\n          }\n          onChange={filterByCamerasName}\n          label=\"Camera\"\n          inputProps={{\n            name: 'rover',\n            id: 'outlined-age-native-simple',\n          }}\n        >\n          <option\n            disabled\n            aria-label=\"None\"\n            value=\"Choose camera\"\n            className=\"cameras__option\"\n          >\n            Choose camera\n          </option>\n          {cameras.map(camera => (\n            <option\n              className=\"cameras__option\"\n              key={camera.id}\n              value={camera.name}\n            >\n              {camera.name}\n            </option>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n\nCamerasSelect.propTypes = {\n  cameras: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n\n  selectedCamera: PropTypes.shape({}).isRequired,\n\n  filterByCamerasName: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './solRange.scss';\n\nexport const SolRange = ({\n  solRange,\n  selectSolDays,\n  selectedRover,\n}) => (\n  <div className=\"sol-range\">\n    <label\n      htmlFor=\"rangeId\"\n      className=\"sol-range__label\"\n    >\n      Choose sol:\n    </label>\n    <input\n      min=\"1\"\n      max={\n        // eslint-disable-next-line no-prototype-builtins\n        selectedRover.hasOwnProperty('max_sol')\n          ? selectedRover.max_sol\n          : '1'\n      }\n      type=\"range\"\n      className=\"sol-range__field\"\n      id=\"rangeId\"\n      defaultValue={solRange}\n      onChange={selectSolDays}\n    />\n    <p className=\"sol-range__text\">\n      {solRange}\n    </p>\n  </div>\n);\n\nSolRange.propTypes = {\n  solRange: PropTypes.string.isRequired,\n  selectSolDays: PropTypes.func.isRequired,\n  selectedRover: PropTypes.shape({\n    max_sol: PropTypes.number,\n  }).isRequired,\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-prototype-builtins */\nimport React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\n\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport ArrowRightIcon from '@material-ui/icons/ArrowRight';\nimport ArrowLeftIcon from '@material-ui/icons/ArrowLeft';\n\nimport { urls } from '../api/api';\n\nimport './nasaPhoto.scss';\n\nexport const NasaPhoto = ({\n  selectedRover,\n  selectedCamera,\n  solRange,\n  setSelectedRover,\n  setSelectedCamera,\n  setSolRange,\n}) => {\n  const [photoData, setPhotoData] = useState([]);\n  const [photoNumber, setPhotoNumber] = useState(1);\n\n  const { baseUrl, token } = urls;\n  let rover = '';\n  let camera = '';\n\n  if (selectedRover && selectedCamera) {\n    if (selectedRover.hasOwnProperty('name')\n    && selectedCamera.hasOwnProperty('name')) {\n      rover = selectedRover.name.toLowerCase();\n      camera = selectedCamera.name.toLowerCase();\n    }\n  }\n\n  const totalUrl\n    = `${baseUrl}/${rover}/photos?sol=${solRange}&${camera}&${token}`;\n\n  // eslint-disable-next-line no-console\n  console.log(totalUrl);\n\n  const [buttons, setButtons] = useState([]);\n\n  const fetchPhoto = async() => {\n    if (rover && camera) {\n      const response = await fetch(totalUrl);\n      const data = await response.json();\n\n      setPhotoData([...data.photos]);\n    }\n\n    setSelectedRover({});\n    setSelectedCamera({});\n    setSolRange('1');\n    reset();\n    setButtons([]);\n  };\n\n  useEffect(() => {\n    fetchPhoto();\n  }, []);\n  // , setButtonsLimit\n  const [buttonsLimit] = useState(5);\n  const [maxButtonsLimit, setMaxButtonsLimit] = useState(5);\n  const [minButtonsLimit, setMinButtonsLimit] = useState(0);\n\n  const decrease = () => {\n    setPhotoNumber(prevValue => prevValue - 1);\n\n    if ((photoNumber) % buttonsLimit === 0) {\n      setMaxButtonsLimit(maxButtonsLimit - buttonsLimit);\n      setMinButtonsLimit(minButtonsLimit - buttonsLimit);\n    }\n  };\n\n  const increase = () => {\n    setPhotoNumber(prevValue => prevValue + 1);\n\n    if (photoNumber + 2 > maxButtonsLimit) {\n      setMaxButtonsLimit(maxButtonsLimit + buttonsLimit);\n      setMinButtonsLimit(minButtonsLimit + buttonsLimit);\n    }\n  };\n\n  const reset = () => {\n    setPhotoNumber(0);\n  };\n\n  function setImg({ target }) {\n    // eslint-disable-next-line no-return-assign\n    setPhotoNumber(prevValue => prevValue = Number(target.name) - 1);\n  }\n\n  // const [buttonsPerPage, setButtonsPerPage] = useState(5);\n\n  photoData.map((photo, index) => buttons.push(index + 1));\n  const currentButtons = buttons.slice(minButtonsLimit, maxButtonsLimit);\n  // const [currentButtonnss, setCurrentButtonnss] = useState(currentButtons);\n  // const lastButtons = (buttons[buttons.length - 1]) % buttonsLimit;\n\n  // console.log(currentButtonnss);\n  // console.log(photoNumber);\n  // console.log(minButtonsLimit);\n  // console.log(maxButtonsLimit);\n  // console.log(minButtonsLimit + lastButtons);\n\n  return (\n    <div className=\"photo\">\n      <div className=\"photo__download-block\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={fetchPhoto}\n        >\n          Download Photo\n          <PhotoCamera />\n        </Button>\n      </div>\n      <div className=\"photo__buttons\">\n        <button\n          type=\"button\"\n          onClick={decrease}\n          disabled={photoNumber === 0}\n          className=\"photo__btn photo__btn-left\"\n        >\n          <ArrowLeftIcon className=\"photo__btn-icon\" />\n        </button>\n        <button\n          type=\"button\"\n          onClick={increase}\n          disabled={photoNumber === photoData.length - 1}\n          className=\"photo__btn photo__btn-right\"\n        >\n          <ArrowRightIcon className=\"photo__btn-icon\" />\n        </button>\n      </div>\n      {!photoData.length && (\n        <h2 className=\"photo__title-loading\">\n          No photos, try another camera\n        </h2>\n      )}\n      {photoData.length > 1 && (\n        <div className=\"photo__container\">\n          <div className=\"photo__buttons-row\">\n            {currentButtons.map(number => (\n              <button\n                className={classNames('photo__btn-num', {\n                  photo__btn_active: photoNumber === number - 1,\n                })}\n                type=\"button\"\n                key={number}\n                variant=\"contained\"\n                color=\"primary\"\n                name={number}\n                onClick={(event) => {\n                  setImg(event);\n                  event.stopPropagation();\n                }}\n              >\n                {number}\n              </button>\n            ))}\n          </div>\n          <h2 className=\"photo__title-count\">\n            {`${photoNumber + 1} / ${photoData.length}`}\n          </h2>\n          <img\n            className=\"photo__img\"\n            src={(photoData[photoNumber]) && photoData[photoNumber].img_src}\n            alt=\"rover\"\n          />\n          {photoData[photoNumber] && (\n            <p className=\"photo__date\">\n              {photoData[photoNumber].earth_date}\n            </p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nNasaPhoto.propTypes = {\n  selectedRover: PropTypes.shape({\n    name: PropTypes.string,\n  }).isRequired,\n  selectedCamera: PropTypes.shape({\n    name: PropTypes.string,\n  }).isRequired,\n  solRange: PropTypes.string.isRequired,\n\n  setSelectedRover: PropTypes.func.isRequired,\n  setSelectedCamera: PropTypes.func.isRequired,\n  setSolRange: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport { getRovers } from './components/api/api';\nimport { RoverSelect } from './components/RoverSelect';\nimport { CamerasSelect } from './components/CamerasSelect';\nimport { SolRange } from './components/SolRange';\nimport { NasaPhoto } from './components/NasaPhoto';\n\nimport './app.scss';\n\nexport const App = () => {\n  const [rovers, setRovers] = useState([]);\n  const [selectedRover, setSelectedRover] = useState({});\n  const [cameras, setCameras] = useState([]);\n  const [selectedCamera, setSelectedCamera] = useState({});\n  const [solRange, setSolRange] = useState('1');\n\n  const loadRoversFromPage = async() => {\n    const roversFromServer = await getRovers();\n\n    setRovers([...roversFromServer]);\n  };\n\n  useEffect(() => {\n    loadRoversFromPage();\n  }, []);\n\n  const filterByRoverName = ({ target }) => {\n    const currentRover = rovers.find(rover => rover.name === target.value);\n\n    setSelectedRover(currentRover);\n\n    if (currentRover) {\n      setCameras(currentRover.cameras);\n    }\n  };\n\n  const filterByCamerasName = ({ target }) => {\n    const currentCamera = cameras.find(camera => camera.name === target.value);\n\n    setSelectedCamera(currentCamera);\n  };\n\n  const selectSolDays = ({ target }) => {\n    setSolRange(target.value);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">\n        NASA APIs\n      </h1>\n      <div className=\"app__logo\" />\n      <div className=\"app__selects\">\n        <RoverSelect\n          filterByRoverName={filterByRoverName}\n          selectedRover={selectedRover}\n          rovers={rovers}\n        />\n        <CamerasSelect\n          filterByCamerasName={filterByCamerasName}\n          selectedCamera={selectedCamera}\n          cameras={cameras}\n        />\n        <SolRange\n          selectSolDays={selectSolDays}\n          solRange={solRange}\n          selectedRover={selectedRover}\n        />\n      </div>\n      <NasaPhoto\n        selectedRover={selectedRover}\n        selectedCamera={selectedCamera}\n        solRange={solRange}\n        setSelectedRover={setSelectedRover}\n        setSelectedCamera={setSelectedCamera}\n        setSolRange={setSolRange}\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}